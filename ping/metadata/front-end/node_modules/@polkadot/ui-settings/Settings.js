var _Settings_emitter, _Settings_apiType, _Settings_apiUrl, _Settings_camera, _Settings_i18nLang, _Settings_icon, _Settings_ledgerConn, _Settings_locking, _Settings_metadataUp, _Settings_prefix, _Settings_storage, _Settings_uiMode, _Settings_uiTheme, _Settings_notification;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { EventEmitter } from 'eventemitter3';
import store from 'store';
import { hasProcess, isUndefined } from '@polkadot/util';
import { CAMERA, CAMERA_DEFAULT, CRYPTOS, CRYPTOS_ETH, CRYPTOS_LEDGER, ENDPOINT_DEFAULT, ENDPOINTS, ICON_DEFAULT, ICONS, LANGUAGE_DEFAULT, LEDGER_CONN, LEDGER_CONN_DEFAULT, LOCKING, LOCKING_DEFAULT, METADATA_UP, METADATA_UP_DEFAULT, NOTIFICATION_DEFAULT, PREFIX_DEFAULT, PREFIXES, STORAGE, STORAGE_DEFAULT, UIMODE_DEFAULT, UIMODES, UITHEME_DEFAULT, UITHEMES } from './defaults/index.js';
function withDefault(options, option, fallback) {
    const _option = option || fallback;
    return options.some(({ value }) => value === _option)
        ? _option
        : fallback;
}
export class Settings {
    constructor() {
        _Settings_emitter.set(this, void 0);
        _Settings_apiType.set(this, void 0);
        // will become deprecated for supporting substrate connect light clients. apiType structure should be used instead
        _Settings_apiUrl.set(this, void 0);
        _Settings_camera.set(this, void 0);
        _Settings_i18nLang.set(this, void 0);
        _Settings_icon.set(this, void 0);
        _Settings_ledgerConn.set(this, void 0);
        _Settings_locking.set(this, void 0);
        _Settings_metadataUp.set(this, void 0);
        _Settings_prefix.set(this, void 0);
        _Settings_storage.set(this, void 0);
        _Settings_uiMode.set(this, void 0);
        _Settings_uiTheme.set(this, void 0);
        _Settings_notification.set(this, void 0);
        const settings = store.get('settings') || {};
        __classPrivateFieldSet(this, _Settings_emitter, new EventEmitter(), "f");
        // will become deprecated for supporting substrate connect light clients. apiType structure should be used instead
        __classPrivateFieldSet(this, _Settings_apiUrl, (typeof settings.apiUrl === 'string' && settings.apiUrl) || (hasProcess && process.env && process.env.WS_URL) || ENDPOINT_DEFAULT.value, "f");
        __classPrivateFieldSet(this, _Settings_apiType, { param: __classPrivateFieldGet(this, _Settings_apiUrl, "f"), type: 'json-rpc' }, "f");
        __classPrivateFieldSet(this, _Settings_camera, withDefault(CAMERA, settings.camera, CAMERA_DEFAULT), "f");
        __classPrivateFieldSet(this, _Settings_ledgerConn, withDefault(LEDGER_CONN, settings.ledgerConn, LEDGER_CONN_DEFAULT), "f");
        __classPrivateFieldSet(this, _Settings_i18nLang, settings.i18nLang || LANGUAGE_DEFAULT, "f");
        __classPrivateFieldSet(this, _Settings_icon, settings.icon || ICON_DEFAULT, "f");
        __classPrivateFieldSet(this, _Settings_locking, settings.locking || LOCKING_DEFAULT, "f");
        __classPrivateFieldSet(this, _Settings_metadataUp, withDefault(METADATA_UP, settings.storage, METADATA_UP_DEFAULT), "f");
        __classPrivateFieldSet(this, _Settings_notification, settings.notification || NOTIFICATION_DEFAULT, "f");
        __classPrivateFieldSet(this, _Settings_prefix, isUndefined(settings.prefix) ? PREFIX_DEFAULT : settings.prefix, "f");
        __classPrivateFieldSet(this, _Settings_storage, withDefault(STORAGE, settings.storage, STORAGE_DEFAULT), "f");
        __classPrivateFieldSet(this, _Settings_uiMode, settings.uiMode || UIMODE_DEFAULT, "f");
        __classPrivateFieldSet(this, _Settings_uiTheme, settings.uiTheme || UITHEME_DEFAULT, "f");
    }
    get camera() {
        return __classPrivateFieldGet(this, _Settings_camera, "f");
    }
    get apiType() {
        return __classPrivateFieldGet(this, _Settings_apiType, "f");
    }
    get apiUrl() {
        return __classPrivateFieldGet(this, _Settings_apiUrl, "f");
    }
    get i18nLang() {
        return __classPrivateFieldGet(this, _Settings_i18nLang, "f");
    }
    get icon() {
        return __classPrivateFieldGet(this, _Settings_icon, "f");
    }
    get notification() {
        return __classPrivateFieldGet(this, _Settings_notification, "f");
    }
    get ledgerConn() {
        return __classPrivateFieldGet(this, _Settings_ledgerConn, "f");
    }
    get locking() {
        return __classPrivateFieldGet(this, _Settings_locking, "f");
    }
    get metadataUp() {
        return __classPrivateFieldGet(this, _Settings_metadataUp, "f");
    }
    get prefix() {
        return __classPrivateFieldGet(this, _Settings_prefix, "f");
    }
    get storage() {
        return __classPrivateFieldGet(this, _Settings_storage, "f");
    }
    get uiMode() {
        return __classPrivateFieldGet(this, _Settings_uiMode, "f");
    }
    get uiTheme() {
        return __classPrivateFieldGet(this, _Settings_uiTheme, "f");
    }
    get availableCamera() {
        return CAMERA;
    }
    get availableCryptos() {
        return CRYPTOS;
    }
    get availableCryptosEth() {
        return CRYPTOS_ETH;
    }
    get availableCryptosLedger() {
        return CRYPTOS_LEDGER;
    }
    get availableIcons() {
        return ICONS;
    }
    get availableLedgerConn() {
        return LEDGER_CONN;
    }
    get availableLocking() {
        return LOCKING;
    }
    get availableMetadataUp() {
        return METADATA_UP;
    }
    get availableNodes() {
        return ENDPOINTS;
    }
    get availablePrefixes() {
        return PREFIXES;
    }
    get availableStorage() {
        return STORAGE;
    }
    get availableUIModes() {
        return UIMODES;
    }
    get availableUIThemes() {
        return UITHEMES;
    }
    get() {
        return {
            apiType: __classPrivateFieldGet(this, _Settings_apiType, "f"),
            apiUrl: __classPrivateFieldGet(this, _Settings_apiUrl, "f"),
            camera: __classPrivateFieldGet(this, _Settings_camera, "f"),
            i18nLang: __classPrivateFieldGet(this, _Settings_i18nLang, "f"),
            icon: __classPrivateFieldGet(this, _Settings_icon, "f"),
            ledgerConn: __classPrivateFieldGet(this, _Settings_ledgerConn, "f"),
            locking: __classPrivateFieldGet(this, _Settings_locking, "f"),
            metadataUp: __classPrivateFieldGet(this, _Settings_metadataUp, "f"),
            notification: __classPrivateFieldGet(this, _Settings_notification, "f"),
            prefix: __classPrivateFieldGet(this, _Settings_prefix, "f"),
            storage: __classPrivateFieldGet(this, _Settings_storage, "f"),
            uiMode: __classPrivateFieldGet(this, _Settings_uiMode, "f"),
            uiTheme: __classPrivateFieldGet(this, _Settings_uiTheme, "f")
        };
    }
    set(settings) {
        __classPrivateFieldSet(this, _Settings_apiType, settings.apiType || __classPrivateFieldGet(this, _Settings_apiType, "f"), "f");
        __classPrivateFieldSet(this, _Settings_apiUrl, settings.apiUrl || __classPrivateFieldGet(this, _Settings_apiUrl, "f"), "f");
        __classPrivateFieldSet(this, _Settings_camera, settings.camera || __classPrivateFieldGet(this, _Settings_camera, "f"), "f");
        __classPrivateFieldSet(this, _Settings_ledgerConn, settings.ledgerConn || __classPrivateFieldGet(this, _Settings_ledgerConn, "f"), "f");
        __classPrivateFieldSet(this, _Settings_i18nLang, settings.i18nLang || __classPrivateFieldGet(this, _Settings_i18nLang, "f"), "f");
        __classPrivateFieldSet(this, _Settings_icon, settings.icon || __classPrivateFieldGet(this, _Settings_icon, "f"), "f");
        __classPrivateFieldSet(this, _Settings_locking, settings.locking || __classPrivateFieldGet(this, _Settings_locking, "f"), "f");
        __classPrivateFieldSet(this, _Settings_metadataUp, settings.metadataUp || __classPrivateFieldGet(this, _Settings_metadataUp, "f"), "f");
        __classPrivateFieldSet(this, _Settings_notification, settings.notification || __classPrivateFieldGet(this, _Settings_notification, "f"), "f");
        __classPrivateFieldSet(this, _Settings_prefix, isUndefined(settings.prefix) ? __classPrivateFieldGet(this, _Settings_prefix, "f") : settings.prefix, "f");
        __classPrivateFieldSet(this, _Settings_storage, settings.storage || __classPrivateFieldGet(this, _Settings_storage, "f"), "f");
        __classPrivateFieldSet(this, _Settings_uiMode, settings.uiMode || __classPrivateFieldGet(this, _Settings_uiMode, "f"), "f");
        __classPrivateFieldSet(this, _Settings_uiTheme, settings.uiTheme || __classPrivateFieldGet(this, _Settings_uiTheme, "f"), "f");
        const newValues = this.get();
        store.set('settings', newValues);
        __classPrivateFieldGet(this, _Settings_emitter, "f").emit('change', newValues);
    }
    on(type, cb) {
        __classPrivateFieldGet(this, _Settings_emitter, "f").on(type, cb);
    }
}
_Settings_emitter = new WeakMap(), _Settings_apiType = new WeakMap(), _Settings_apiUrl = new WeakMap(), _Settings_camera = new WeakMap(), _Settings_i18nLang = new WeakMap(), _Settings_icon = new WeakMap(), _Settings_ledgerConn = new WeakMap(), _Settings_locking = new WeakMap(), _Settings_metadataUp = new WeakMap(), _Settings_prefix = new WeakMap(), _Settings_storage = new WeakMap(), _Settings_uiMode = new WeakMap(), _Settings_uiTheme = new WeakMap(), _Settings_notification = new WeakMap();
export const settings = new Settings();
