import { combineLatest, map, of } from 'rxjs';
import { firstMemo, memo } from '../util/index.js';
import { erasHistoricApplyAccount } from './util.js';
export function _ownExposures(instanceId, api) {
    return memo(instanceId, (accountId, eras, _withActive, page) => {
        return eras.length
            ? combineLatest([
                // Backwards and forward compat for historical integrity when using `erasHistoricApplyAccount`
                combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId))),
                combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId))),
                combineLatest(eras.map((e) => api.query.staking.erasStakersPaged(e, accountId, page))),
                combineLatest(eras.map((e) => api.query.staking.erasStakersOverview(e, accountId)))
            ]).pipe(map(([clp, exp, paged, expMeta]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index], exposureMeta: expMeta[index], exposurePaged: paged[index] }))))
            : of([]);
    });
}
export const ownExposure = /*#__PURE__*/ firstMemo((api, accountId, era, page) => api.derive.staking._ownExposures(accountId, [era], true, page || 0));
export const ownExposures = /*#__PURE__*/ erasHistoricApplyAccount('_ownExposures');
