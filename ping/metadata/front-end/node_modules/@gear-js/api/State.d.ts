import { Codec } from '@polkadot/types/types';
import { ProgramMetadata, StateMetadata } from './metadata';
import { ReadStateBatchParams, ReadStateParams, ReadStateUsingWasmParams } from './types';
import { Bytes } from '@polkadot/types';
import { GearProgramStorage } from './Storage';
export declare class GearProgramState extends GearProgramStorage {
    /**
     * ## Read state using meta wasm file
     * @param args
     * @param meta StateMetadata returned from getStateMetadata function
     */
    readUsingWasm(params: ReadStateUsingWasmParams, stateMeta: StateMetadata, programMeta: ProgramMetadata): Promise<Codec>;
    /**
     * ### Read state of program (calls `gear_readState` rpc call)
     * @param args ProgramId, payload and hash of block where it's necessary to read state (optional)
     * @param meta (optional) Program metadata returned from `ProgramMetadata.from` method. If not specified, payload will be sent and state will be returned as `Bytes`
     * @param type (optional) Index of type to decode state. metadata.types.state.input is uesd by default
     *
     * @example
     * const meta = ProgramMetadata.from('0x...');
     * const programId = '0x...';
     *
     * const result = await api.programState.read({ programId, payload: { id: 1 } }, meta);
     * console.log(result.toJSON());
     */
    read<T extends Codec = Codec>(args: ReadStateParams, meta?: ProgramMetadata, type?: number): Promise<T>;
    readBatch(args: ReadStateBatchParams): Promise<Bytes[]>;
}
