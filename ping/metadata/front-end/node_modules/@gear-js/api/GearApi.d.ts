import { ApiPromise, WsProvider } from '@polkadot/api';
import { Event } from '@polkadot/types/interfaces';
import { u128, u64 } from '@polkadot/types';
import { ExtrinsicFailedData, GearApiOptions, InflationInfo } from './types';
import { GearBalance } from './Balance';
import { GearBlock } from './Blocks';
import { GearClaimValue } from './Claim';
import { GearCode } from './Code';
import { GearEvents } from './events';
import { GearMailbox } from './Mailbox';
import { GearMessage } from './Message';
import { GearProgram } from './Program';
import { GearProgramState } from './State';
import { GearProgramStorage } from './Storage';
import { GearVoucher } from './Voucher';
import { GearWaitlist } from './Waitlist';
export declare class GearApi extends ApiPromise {
    program: GearProgram;
    programState: GearProgramState;
    programStorage: GearProgramStorage;
    message: GearMessage;
    balance: GearBalance;
    gearEvents: GearEvents;
    defaultTypes: Record<string, unknown>;
    blocks: GearBlock;
    mailbox: GearMailbox;
    claimValueFromMailbox: GearClaimValue;
    code: GearCode;
    waitlist: GearWaitlist;
    voucher: GearVoucher;
    provider: WsProvider;
    constructor(options?: GearApiOptions);
    static create(options?: GearApiOptions): Promise<GearApi>;
    totalIssuance(): Promise<string>;
    chain(): Promise<string>;
    nodeName(): Promise<string>;
    nodeVersion(): Promise<string>;
    get specVersion(): number;
    get specName(): string;
    get existentialDeposit(): u128;
    get blockGasLimit(): u64;
    get mailboxTreshold(): u64;
    get waitlistCost(): u64;
    get valuePerGas(): u128;
    inflationInfo(): Promise<InflationInfo>;
    wasmBlobVersion(): Promise<string>;
    /**
     * Method provides opportunity to get informations about error occurs in ExtrinsicFailed event
     * @param event
     * @returns
     */
    getExtrinsicFailedError(event: Event): ExtrinsicFailedData;
}
