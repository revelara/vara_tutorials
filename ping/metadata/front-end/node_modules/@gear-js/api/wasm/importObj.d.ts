import { u64 } from '@polkadot/types';
import { BlockNumber } from '@polkadot/types/interfaces';
declare const _default: (memory: WebAssembly.Memory, showDebug?: boolean, inputValue?: Uint8Array, timestamp?: u64, block_height?: BlockNumber, replyFn?: (payload: number, len: number) => void) => {
    env: {
        abortStackOverflow: () => never;
        table: WebAssembly.Table;
        tableBase: number;
        memory: WebAssembly.Memory;
        memoryBase: number;
        STACKTOP: number;
        STACK_MAX: number;
        alloc: (pages: number) => number;
        free: () => void;
        free_range: () => void;
        gr_env_vars: () => void;
        gr_block_height: () => BlockNumber;
        gr_block_timestamp: () => u64;
        gr_create_program_wgas: () => void;
        gr_create_program: () => void;
        gr_reply_deposit: () => void;
        gr_debug: (payload: number, len: number) => void;
        gr_error: (error: number, len: number) => void;
        gr_origin: () => void;
        gr_pay_program_rent: () => void;
        gr_status_code: () => void;
        gr_panic: () => void;
        gr_oom_panic: () => void;
        gr_reply_code: () => void;
        gr_signal_code: () => void;
        gr_exit: () => void;
        gr_gas_available: () => void;
        gr_leave: () => void;
        gr_message_id: () => void;
        gr_program_id: () => void;
        gr_random: () => void;
        gr_read: (at: number, len: number, buffer: number) => void;
        gr_reply_commit_wgas: () => void;
        gr_reply_commit: () => void;
        gr_reply_push: () => void;
        gr_reply_push_input: () => void;
        gr_reply_to: () => void;
        gr_signal_from: () => void;
        gr_reply_input_wgas: () => void;
        gr_reply_wgas: () => void;
        gr_reply: (payload: number, len: number) => void;
        gr_reply_input: () => void;
        gr_reservation_reply_commit: () => void;
        gr_reservation_reply: () => void;
        gr_reservation_send_commit: () => void;
        gr_reservation_send: () => void;
        gr_reserve_gas: () => void;
        gr_send_commit_wgas: () => void;
        gr_send_commit: () => void;
        gr_send_init: () => void;
        gr_send_push: () => void;
        gr_send_push_input: () => void;
        gr_send_input_wgas: () => void;
        gr_send_wgas: () => void;
        gr_send: () => void;
        gr_send_input: () => void;
        gr_size: (size_ptr: number) => void;
        gr_source: () => void;
        gr_system_reserve_gas: () => void;
        gr_unreserve_gas: () => void;
        gr_value_available: () => void;
        gr_value: () => void;
        gr_wait_for: () => void;
        gr_wait_up_to: () => void;
        gr_wait: () => void;
        gr_wake: () => void;
    };
};
export default _default;
