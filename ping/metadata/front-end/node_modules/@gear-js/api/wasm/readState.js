import { PAGE_SIZE, getExportValue } from './utils.js';
import importObj from './importObj.js';

async function readState(wasmBytes, initialSize, pages, inputValue, blockTimestamp, blockNumber) {
    const memory = new WebAssembly.Memory({ initial: initialSize });
    const module = await WebAssembly.instantiate(wasmBytes, importObj(memory, true, inputValue, blockTimestamp, blockNumber));
    Object.keys(pages).forEach((pageNumber) => {
        const start = +pageNumber * PAGE_SIZE;
        const end = start + PAGE_SIZE;
        const page = pages[pageNumber];
        for (let i = start; i < end; i++) {
            new Uint8Array(memory.buffer)[i] = page[i % PAGE_SIZE];
        }
    });
    const { exports } = module.instance;
    return exports?.meta_state ? new Uint8Array(getExportValue(memory, exports.meta_state)) : null;
}

export { readState };
